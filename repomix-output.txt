This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-02T19:27:18.538Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
src/
  controllers/
    adminController.js
    apiController.js
  models/
    faq.js
  routes/
    admin.js
    api.js
  utils/
    cache.js
    translator.js
  views/
    admin/
      create-faq.ejs
      dashboard.ejs
      edit-faq.ejs
    layouts/
      main.ejs
  app.js
  server.js
tests/
  api.test.js
package.json

================================================================
Repository Files
================================================================

================
File: src/controllers/adminController.js
================
// src/controllers/adminController.js
const FAQ = require('../models/faq');
const { translateText } = require('../utils/translator');

const adminController = {
  // Show dashboard
  dashboard: async (req, res) => {
    try {
      const faqs = await FAQ.find().sort('-createdAt');
      res.render('admin/dashboard', { 
        faqs,
        messages: req.flash()
      });
    } catch (error) {
      req.flash('error', 'Failed to load FAQs');
      res.redirect('/admin');
    }
  },

  // Show FAQ creation form
  showCreateForm: (req, res) => {
    res.render('admin/create-faq', { 
      messages: req.flash()
    });
  },

  // Create new FAQ
  createFaq: async (req, res) => {
    try {
      const { question, answer } = req.body;
      
      // Create FAQ in English
      const faq = new FAQ({
        question,
        answer,
        translations: new Map()
      });

      // Generate translations
      const languages = ['hi', 'bn', 'es']; // Add more languages as needed
      for (const lang of languages) {
        const translatedQuestion = await translateText(question, lang);
        const translatedAnswer = await translateText(answer, lang);
        
        faq.translations.set(lang, {
          question: translatedQuestion,
          answer: translatedAnswer
        });
      }

      await faq.save();
      req.flash('success', 'FAQ created successfully');
      res.redirect('/admin');
    } catch (error) {
      req.flash('error', 'Failed to create FAQ');
      res.redirect('/admin/faqs/create');
    }
  },

  // Show edit form
  showEditForm: async (req, res) => {
    try {
      const faq = await FAQ.findById(req.params.id);
      if (!faq) {
        req.flash('error', 'FAQ not found');
        return res.redirect('/admin');
      }
      res.render('admin/edit-faq', { faq, messages: req.flash() });
    } catch (error) {
      req.flash('error', 'Failed to load FAQ');
      res.redirect('/admin');
    }
  },

  // Update FAQ
  updateFaq: async (req, res) => {
    try {
      const { question, answer } = req.body;
      const faq = await FAQ.findById(req.params.id);
      
      if (!faq) {
        req.flash('error', 'FAQ not found');
        return res.redirect('/admin');
      }

      faq.question = question;
      faq.answer = answer;

      // Update translations
      const languages = ['hi', 'bn', 'es'];
      for (const lang of languages) {
        const translatedQuestion = await translateText(question, lang);
        const translatedAnswer = await translateText(answer, lang);
        
        faq.translations.set(lang, {
          question: translatedQuestion,
          answer: translatedAnswer
        });
      }

      await faq.save();
      req.flash('success', 'FAQ updated successfully');
      res.redirect('/admin');
    } catch (error) {
      req.flash('error', 'Failed to update FAQ');
      res.redirect(`/admin/faqs/${req.params.id}/edit`);
    }
  },

  // Delete FAQ
  deleteFaq: async (req, res) => {
    try {
      await FAQ.findByIdAndDelete(req.params.id);
      req.flash('success', 'FAQ deleted successfully');
      res.redirect('/admin');
    } catch (error) {
      req.flash('error', 'Failed to delete FAQ');
      res.redirect('/admin');
    }
  }
};

module.exports = adminController;

================
File: src/controllers/apiController.js
================
// src/controllers/apiController.js
const FAQ = require('../models/faq');
const cacheService = require('../utils/cache');

const apiController = {
    // Get all FAQs with language support
    getAllFaqs: async (req, res) => {
        try {
            const lang = req.query.lang || 'en';
            const cacheKey = `faqs_${lang}`;

            // Try to get from cache first
            const cachedData = await cacheService.get(cacheKey);
            if (cachedData) {
                return res.json(cachedData);
            }

            // If not in cache, get from database
            const faqs = await FAQ.find({ isActive: true });
            const translatedFaqs = faqs.map(faq => ({
                id: faq._id,
                ...faq.getTranslation(lang)
            }));

            // Store in cache
            await cacheService.set(cacheKey, translatedFaqs);

            res.json(translatedFaqs);
        } catch (error) {
            console.error('API Error:', error);
            res.status(500).json({ error: 'Internal server error' });
        }
    },

    // Get single FAQ
    getFaqById: async (req, res) => {
        try {
            const lang = req.query.lang || 'en';
            const faqId = req.params.id;
            const cacheKey = `faq_${faqId}_${lang}`;

            // Try cache first
            const cachedData = await cacheService.get(cacheKey);
            if (cachedData) {
                return res.json(cachedData);
            }

            const faq = await FAQ.findById(faqId);
            if (!faq) {
                return res.status(404).json({ error: 'FAQ not found' });
            }

            const translatedFaq = {
                id: faq._id,
                ...faq.getTranslation(lang)
            };

            // Store in cache
            await cacheService.set(cacheKey, translatedFaq);

            res.json(translatedFaq);
        } catch (error) {
            console.error('API Error:', error);
            res.status(500).json({ error: 'Internal server error' });
        }
    },

    // Search FAQs
    searchFaqs: async (req, res) => {
        try {
            const { query } = req.query;
            const lang = req.query.lang || 'en';
            
            if (!query) {
                return res.status(400).json({ error: 'Search query is required' });
            }

            const cacheKey = `search_${query}_${lang}`;
            
            // Try cache first
            const cachedResults = await cacheService.get(cacheKey);
            if (cachedResults) {
                return res.json(cachedResults);
            }

            let faqs;
            if (lang === 'en') {
                faqs = await FAQ.find({
                    $or: [
                        { question: { $regex: query, $options: 'i' } },
                        { answer: { $regex: query, $options: 'i' } }
                    ],
                    isActive: true
                });
            } else {
                // Search in translations
                faqs = await FAQ.find({
                    [`translations.${lang}.question`]: { $regex: query, $options: 'i' },
                    isActive: true
                });
            }

            const results = faqs.map(faq => ({
                id: faq._id,
                ...faq.getTranslation(lang)
            }));

            // Store in cache
            await cacheService.set(cacheKey, results, 1800); // Cache for 30 minutes

            res.json(results);
        } catch (error) {
            console.error('Search Error:', error);
            res.status(500).json({ error: 'Internal server error' });
        }
    }
};

module.exports = apiController;

================
File: src/models/faq.js
================
// src/models/faq.js
const mongoose = require('mongoose');

const faqSchema = new mongoose.Schema({
  question: {
    type: String,
    required: true,
    trim: true
  },
  answer: {
    type: String,
    required: true
  },
  translations: {
    type: Map,
    of: {
      question: String,
      answer: String
    }
  },
  isActive: {
    type: Boolean,
    default: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
}, { timestamps: true });

// Method to get translated content
faqSchema.methods.getTranslation = function(language) {
  if (language === 'en') {
    return {
      question: this.question,
      answer: this.answer
    };
  }
  return this.translations.get(language) || {
    question: this.question,
    answer: this.answer
  };
};

const FAQ = mongoose.model('FAQ', faqSchema);

module.exports = FAQ;

================
File: src/routes/admin.js
================
// src/routes/admin.js
const express = require('express');
const router = express.Router();
const adminController = require('../controllers/adminController');

// Admin dashboard
router.get('/', adminController.dashboard);

// FAQ routes
router.get('/faqs/create', adminController.showCreateForm);
router.post('/faqs/create', adminController.createFaq);
router.get('/faqs/:id/edit', adminController.showEditForm);
router.put('/faqs/:id', adminController.updateFaq);
router.delete('/faqs/:id', adminController.deleteFaq);

module.exports = router;

================
File: src/routes/api.js
================
// src/routes/api.js
const express = require('express');
const router = express.Router();
const apiController = require('../controllers/apiController');

// Get all FAQs
router.get('/faqs', apiController.getAllFaqs);

// Search FAQs
router.get('/faqs/search', apiController.searchFaqs);

// Get single FAQ (this should come after other /faqs routes)
router.get('/faqs/:id', apiController.getFaqById);

module.exports = router;

================
File: src/utils/cache.js
================
// src/utils/cache.js
const Redis = require('ioredis');
const redis = new Redis(process.env.REDIS_URL);

const CACHE_DURATION = 3600; // 1 hour in seconds

const cacheService = {
    async get(key) {
        try {
            const data = await redis.get(key);
            return data ? JSON.parse(data) : null;
        } catch (error) {
            console.error('Redis get error:', error);
            return null;
        }
    },

    async set(key, data, duration = CACHE_DURATION) {
        try {
            await redis.setex(key, duration, JSON.stringify(data));
            return true;
        } catch (error) {
            console.error('Redis set error:', error);
            return false;
        }
    },

    async del(key) {
        try {
            await redis.del(key);
            return true;
        } catch (error) {
            console.error('Redis delete error:', error);
            return false;
        }
    }
};

module.exports = cacheService;

================
File: src/utils/translator.js
================
// src/utils/translator.js
const axios = require('axios');

const subscriptionKey = process.env.AZURE_TRANSLATOR_KEY;
const endpoint = process.env.AZURE_TRANSLATOR_ENDPOINT;
const location = process.env.AZURE_TRANSLATOR_REGION;

const translateText = async (text, targetLanguage) => {
    try {
        const response = await axios({
            baseURL: endpoint,
            url: '/translate',
            method: 'post',
            headers: {
                'Ocp-Apim-Subscription-Key': subscriptionKey,
                'Ocp-Apim-Subscription-Region': location,
                'Content-type': 'application/json',
            },
            params: {
                'api-version': '3.0',
                'to': targetLanguage
            },
            data: [{
                'text': text
            }]
        });

        return response.data[0].translations[0].text;
    } catch (error) {
        console.error('Translation error:', error.response?.data || error.message);
        return text; // Return original text as fallback
    }
};

module.exports = { translateText };

================
File: src/views/admin/create-faq.ejs
================
<div class="card">
    <div class="card-header">
        <h2>Create New FAQ</h2>
    </div>
    <div class="card-body">
        <form action="http://localhost:3000/admin/faqs/create" method="POST">
            <div class="mb-3">
                <label for="question" class="form-label">Question</label>
                <input type="text" class="form-control" id="question" name="question" required>
            </div>
            <div class="mb-3">
                <label for="answer" class="form-label">Answer</label>
                <textarea class="form-control editor" id="answer" name="answer" rows="5" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Create FAQ</button>
            <a href="http://localhost:3000/admin" class="btn btn-secondary">Cancel</a>
        </form>
    </div>
</div>

================
File: src/views/admin/dashboard.ejs
================
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>FAQ Management</h1>
    <a href="http://localhost:3000/admin/faqs/create" class="btn btn-primary">Create New FAQ</a>
</div>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Question</th>
                <th>Created At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% if (faqs && faqs.length > 0) { %>
                <% faqs.forEach(faq => { %>
                    <tr>
                        <td><%= faq.question %></td>
                        <td><%= new Date(faq.createdAt).toLocaleDateString() %></td>
                        <td>
                            <div class="btn-group">
                                <a href="http://localhost:3000/admin/faqs/<%= faq._id %>/edit" class="btn btn-sm btn-warning">Edit</a>
                                <form action="http://localhost:3000/admin/faqs/<%= faq._id %>?_method=DELETE" method="POST" class="d-inline">
                                    <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure?')">Delete</button>
                                </form>
                            </div>
                        </td>
                    </tr>
                <% }) %>
            <% } else { %>
                <tr>
                    <td colspan="3" class="text-center">No FAQs found</td>
                </tr>
            <% } %>
        </tbody>
    </table>
</div>

================
File: src/views/admin/edit-faq.ejs
================
<!-- src/views/admin/edit-faq.ejs -->
<div class="card">
    <div class="card-header">
        <h2>Edit FAQ</h2>
    </div>
    <div class="card-body">
        <form action="<%= baseUrl %>/admin/faqs/<%= faq._id %>?_method=PUT" method="POST">
            <div class="mb-3">
                <label for="question" class="form-label">Question</label>
                <input type="text" class="form-control" id="question" name="question" value="<%= faq.question %>" required>
            </div>
            <div class="mb-3">
                <label for="answer" class="form-label">Answer</label>
                <textarea class="form-control editor" id="answer" name="answer" rows="5" required><%- faq.answer %></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Update FAQ</button>
            <a href="<%= baseUrl %>/admin" class="btn btn-secondary">Cancel</a>
        </form>
    </div>
</div>

<!-- Show translations -->
<div class="card mt-4">
    <div class="card-header">
        <h3>Translations</h3>
    </div>
    <div class="card-body">
        <div class="accordion" id="translationsAccordion">
            <% ['hi', 'es', 'bn'].forEach((lang, index) => { %>
                <% const translation = faq.translations.get(lang) || {} %>
                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading<%= lang %>">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                                data-bs-target="#collapse<%= lang %>" aria-expanded="false" 
                                aria-controls="collapse<%= lang %>">
                            <%= lang.toUpperCase() %> Translation
                        </button>
                    </h2>
                    <div id="collapse<%= lang %>" class="accordion-collapse collapse" 
                         aria-labelledby="heading<%= lang %>" data-bs-parent="#translationsAccordion">
                        <div class="accordion-body">
                            <div class="mb-3">
                                <label class="form-label">Question</label>
                                <div><%= translation.question || 'No translation available' %></div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Answer</label>
                                <div><%- translation.answer || 'No translation available' %></div>
                            </div>
                        </div>
                    </div>
                </div>
            <% }) %>
        </div>
    </div>
</div>

================
File: src/views/layouts/main.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FAQ Admin Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.ckeditor.com/4.16.2/standard/ckeditor.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="http://localhost:3000/admin">FAQ Admin</a>
        </div>
    </nav>

    <div class="container mt-4">
        <% if (messages.error) { %>
            <div class="alert alert-danger"><%= messages.error %></div>
        <% } %>
        <% if (messages.success) { %>
            <div class="alert alert-success"><%= messages.success %></div>
        <% } %>
        
        <%- body %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize CKEditor for any textarea with class 'editor'
            document.querySelectorAll('.editor').forEach(editor => {
                CKEDITOR.replace(editor);
            });
        });
    </script>
</body>
</html>

================
File: src/app.js
================
// src/app.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const mongoose = require('mongoose');
const session = require('express-session');
const flash = require('connect-flash');
const methodOverride = require('method-override');
const path = require('path');
const expressLayouts = require('express-ejs-layouts');
require('dotenv').config();

const app = express();

// View engine setup
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(expressLayouts);
app.set('layout', 'layouts/main'); // This will be our default layout

// Middleware
app.use(cors());
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            ...helmet.contentSecurityPolicy.getDefaultDirectives(),
            "script-src": ["'self'", "'unsafe-inline'", "cdn.jsdelivr.net", "cdn.ckeditor.com"],
            "img-src": ["'self'", "data:", "cdn.jsdelivr.net"],
        },
    },
}));
app.use(morgan('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(methodOverride('_method'));

// Session and Flash setup
app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: false
}));
app.use(flash());

// Make flash messages available to all views
app.use((req, res, next) => {
    res.locals.messages = req.flash();
    next();
});

// Database connection
mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));


const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => {
    console.log('Connected to MongoDB');
});

// Routes
const adminRoutes = require('./routes/admin');
const apiRoutes = require('./routes/api');
app.use((req, res, next) => {
    // Make base URL available to all templates
    res.locals.baseUrl = `http://localhost:${process.env.PORT || 3000}`;
    next();
});
app.use('/admin', adminRoutes);
app.use('/api', apiRoutes);

// Health check
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'ok' });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ message: 'Something went wrong!' });
});

module.exports = app;

================
File: src/server.js
================
const app = require('./app');
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

================
File: tests/api.test.js
================
// tests/api.test.js
const request = require('supertest');
const app = require('../src/app');
const mongoose = require('mongoose');
const FAQ = require('../src/models/faq');

beforeAll(async () => {
    await mongoose.connect(process.env.MONGODB_URI);
});

afterAll(async () => {
    await mongoose.connection.close();
});

describe('FAQ API', () => {
    beforeEach(async () => {
        await FAQ.deleteMany({});
    });

    test('GET /api/faqs should return empty array initially', async () => {
        const response = await request(app)
            .get('/api/faqs')
            .expect(200);
        
        expect(Array.isArray(response.body)).toBeTruthy();
        expect(response.body.length).toBe(0);
    });

    test('FAQ should be returned in different languages', async () => {
        // Create a test FAQ
        const faq = new FAQ({
            question: 'Test Question?',
            answer: 'Test Answer',
            translations: new Map([
                ['es', { question: '¿Pregunta de prueba?', answer: 'Respuesta de prueba' }]
            ])
        });
        await faq.save();

        // Test English (default)
        const enResponse = await request(app)
            .get('/api/faqs')
            .expect(200);
        expect(enResponse.body[0].question).toBe('Test Question?');

        // Test Spanish
        const esResponse = await request(app)
            .get('/api/faqs?lang=es')
            .expect(200);
        expect(esResponse.body[0].question).toBe('¿Pregunta de prueba?');
    });
});

================
File: package.json
================
{
  "name": "faq-translation-system",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node src/server.js",
    "dev": "nodemon src/server.js",
    "test": "jest --detectOpenHandles"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@google-cloud/translate": "^8.5.0",
    "axios": "^1.7.9",
    "ckeditor4": "^4.25.0",
    "connect-flash": "^0.1.1",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "ejs": "^3.1.10",
    "express": "^4.21.2",
    "express-ejs-layouts": "^2.5.1",
    "express-session": "^1.18.1",
    "helmet": "^8.0.0",
    "ioredis": "^5.4.2",
    "method-override": "^3.0.0",
    "mongoose": "^8.9.6",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "redis": "^4.7.0",
    "repomix": "^0.2.24"
  },
  "devDependencies": {
    "eslint": "^9.19.0",
    "jest": "^29.7.0",
    "nodemon": "^3.1.9",
    "supertest": "^7.0.0"
  }
}
