This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-03T10:23:28.355Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
src/
  controllers/
    adminController.js
    apiController.js
  models/
    faq.js
  routes/
    admin.js
    api.js
  utils/
    cache.js
    translator.js
  views/
    admin/
      create-faq.ejs
      dashboard.ejs
      edit-faq.ejs
    layouts/
      main.ejs
    welcome.ejs
  app.js
  server.js
test/
  integration/
    admin.test.js
    api.test.js
  unit/
    basic.test.js
    faq.model.test.js
  setup.js
  test-config.js
.editorconfig
.gitignore
.mocharc.json
.prettierrc
docker-compose.yml
Dockerfile
eslintrc.js
package.json
Readme.md

================================================================
Repository Files
================================================================

================
File: src/controllers/adminController.js
================
// src/controllers/adminController.js
import { FAQ } from '../models/faq.js';
import { translateText } from '../utils/translator.js';

export const showCreateForm = (req, res) => {
  res.render('admin/create-faq', { 
    messages: req.flash()
  });
};

export const showEditForm = async (req, res) => {
  try {
    const faq = await FAQ.findById(req.params.id);
    if (!faq) {
      req.flash('error', 'FAQ not found');
      return res.redirect('/admin');
    }
    res.render('admin/edit-faq', { faq, messages: req.flash() });
  } catch (error) {
    req.flash('error', 'Failed to load FAQ');
    res.redirect('/admin');
  }
};

export const deleteFaq = async (req, res) => {
  try {
    await FAQ.findByIdAndDelete(req.params.id);
    req.flash('success', 'FAQ deleted successfully');
    res.redirect('/admin');
  } catch (error) {
    req.flash('error', 'Failed to delete FAQ');
    res.redirect('/admin');
  }
};

export const dashboard = async (req, res) => {
  try {
    // Get all FAQs with their translations, sorted by creation date
    const faqs = await FAQ.find()
                         .sort('-createdAt')
                         .lean() // Convert to plain JS objects for better performance
                         .exec();

    // Add proper Map objects for translations (needed because of lean())
    faqs.forEach(faq => {
      if (faq.translations) {
        faq.translations = new Map(Object.entries(faq.translations));
      }
    });

    res.render('admin/dashboard', { 
      faqs,
      messages: req.flash()
    });
  } catch (error) {
    console.error('Dashboard Error:', error);
    req.flash('error', 'Failed to load FAQs');
    res.redirect('/admin');
  }
};

export const createFaq = async (req, res) => {
  try {
    const { question, answer } = req.body;
    
    // Create new FAQ with initial English content
    const faq = new FAQ({
      question,
      answer,
      translations: new Map()
    });

    // Generate translations for supported languages
    const languages = ['hi', 'bn', 'es'];
    const translationPromises = languages.map(async (lang) => {
      try {
        const [translatedQuestion, translatedAnswer] = await Promise.all([
          translateText(question, lang),
          translateText(answer, lang)
        ]);
        
        faq.translations.set(lang, {
          question: translatedQuestion,
          answer: translatedAnswer
        });
      } catch (error) {
        console.error(`Translation error for ${lang}:`, error);
        // Continue with other translations even if one fails
      }
    });

    // Wait for all translations to complete
    await Promise.all(translationPromises);

    // Save the FAQ with all available translations
    await faq.save();
    
    req.flash('success', 'FAQ created successfully with translations');
    res.redirect('/admin');
  } catch (error) {
    console.error('Create FAQ Error:', error);
    req.flash('error', 'Failed to create FAQ: ' + error.message);
    res.redirect('/admin/faqs/create');
  }
};

export const updateFaq = async (req, res) => {
  try {
    const { question, answer } = req.body;
    const faq = await FAQ.findById(req.params.id);
    
    if (!faq) {
      req.flash('error', 'FAQ not found');
      return res.redirect('/admin');
    }

    // Update English content
    faq.question = question;
    faq.answer = answer;

    // Update translations
    const languages = ['hi', 'bn', 'es'];
    const translationPromises = languages.map(async (lang) => {
      try {
        const [translatedQuestion, translatedAnswer] = await Promise.all([
          translateText(question, lang),
          translateText(answer, lang)
        ]);
        
        faq.translations.set(lang, {
          question: translatedQuestion,
          answer: translatedAnswer
        });
      } catch (error) {
        console.error(`Translation update error for ${lang}:`, error);
        // Keep existing translation if update fails
      }
    });

    // Wait for all translation updates to complete
    await Promise.all(translationPromises);

    await faq.save();
    req.flash('success', 'FAQ updated successfully with translations');
    res.redirect('/admin');
  } catch (error) {
    console.error('Update FAQ Error:', error);
    req.flash('error', 'Failed to update FAQ: ' + error.message);
    res.redirect(`/admin/faqs/${req.params.id}/edit`);
  }
};

================
File: src/controllers/apiController.js
================
// src/controllers/apiController.js
import { FAQ } from '../models/faq.js';
import cacheService from '../utils/cache.js';

export const getAllFaqs = async (req, res) => {
    try {
        const lang = req.query.lang || 'en';
        const cacheKey = `faqs_${lang}`;

        // Try to get from cache first
        const cachedData = await cacheService.get(cacheKey);
        if (cachedData) {
            return res.json(cachedData);
        }

        // If not in cache, get from database
        const faqs = await FAQ.find({ isActive: true });
        const translatedFaqs = faqs.map(faq => ({
            id: faq._id,
            ...faq.getTranslation(lang)
        }));

        // Store in cache
        await cacheService.set(cacheKey, translatedFaqs);

        res.json(translatedFaqs);
    } catch (error) {
        console.error('API Error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
};

export const getFaqById = async (req, res) => {
    try {
        const lang = req.query.lang || 'en';
        const faqId = req.params.id;
        const cacheKey = `faq_${faqId}_${lang}`;

        // Try cache first
        const cachedData = await cacheService.get(cacheKey);
        if (cachedData) {
            return res.json(cachedData);
        }

        const faq = await FAQ.findById(faqId);
        if (!faq) {
            return res.status(404).json({ error: 'FAQ not found' });
        }

        const translatedFaq = {
            id: faq._id,
            ...faq.getTranslation(lang)
        };

        // Store in cache
        await cacheService.set(cacheKey, translatedFaq);

        res.json(translatedFaq);
    } catch (error) {
        console.error('API Error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
};

export const searchFaqs = async (req, res) => {
    try {
        const { query } = req.query;
        const lang = req.query.lang || 'en';
        
        if (!query) {
            return res.status(400).json({ error: 'Search query is required' });
        }

        const cacheKey = `search_${query}_${lang}`;
        
        // Try cache first
        const cachedResults = await cacheService.get(cacheKey);
        if (cachedResults) {
            return res.json(cachedResults);
        }

        let faqs;
        if (lang === 'en') {
            faqs = await FAQ.find({
                $or: [
                    { question: { $regex: query, $options: 'i' } },
                    { answer: { $regex: query, $options: 'i' } }
                ],
                isActive: true
            });
        } else {
            // Search in translations
            faqs = await FAQ.find({
                [`translations.${lang}.question`]: { $regex: query, $options: 'i' },
                isActive: true
            });
        }

        const results = faqs.map(faq => ({
            id: faq._id,
            ...faq.getTranslation(lang)
        }));

        // Store in cache
        await cacheService.set(cacheKey, results, 1800);

        res.json(results);
    } catch (error) {
        console.error('Search Error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
};

================
File: src/models/faq.js
================
// src/models/faq.js
import mongoose from 'mongoose';

const faqSchema = new mongoose.Schema({
    question: {
        type: String,
        required: true,
        trim: true
    },
    answer: {
        type: String,
        required: true
    },
    translations: {
        type: Map,
        of: {
            question: String,
            answer: String
        }
    },
    isActive: {
        type: Boolean,
        default: true
    }
}, { timestamps: true });

// Method to get translated content
faqSchema.methods.getTranslation = function(language) {
    if (!language || language === 'en') {
        return {
            question: this.question,
            answer: this.answer
        };
    }

    const translation = this.translations.get(language);
    if (!translation) {
        return {
            question: this.question,
            answer: this.answer
        };
    }

    return {
        question: translation.question,
        answer: translation.answer
    };
};

export const FAQ = mongoose.model('FAQ', faqSchema);

================
File: src/routes/admin.js
================
// src/routes/admin.js
import express from 'express';
import { dashboard, showCreateForm, createFaq, showEditForm, updateFaq, deleteFaq } from '../controllers/adminController.js';

const router = express.Router();

// Admin dashboard
router.get('/', dashboard);

// FAQ routes
router.get('/faqs/create', showCreateForm);
router.post('/faqs/create', createFaq);
router.get('/faqs/:id/edit', showEditForm);
router.put('/faqs/:id', updateFaq);
router.delete('/faqs/:id', deleteFaq);

export default router;

================
File: src/routes/api.js
================
// src/routes/api.js
import express from 'express';
import { getAllFaqs, getFaqById, searchFaqs } from '../controllers/apiController.js';

const router = express.Router();

// Get all FAQs
router.get('/faqs', getAllFaqs);

// Search FAQs
router.get('/faqs/search', searchFaqs);

// Get single FAQ (this should come after other /faqs routes)
router.get('/faqs/:id', getFaqById);

export default router;

================
File: src/utils/cache.js
================
// src/utils/cache.js
import Redis from 'ioredis';
import dotenv from 'dotenv';

dotenv.config();

let redis = null;

const getRedisClient = () => {
    if (!redis) {
        redis = new Redis(process.env.REDIS_URL, {
            retryStrategy: (times) => {
                const delay = Math.min(times * 50, 2000);
                return delay;
            },
            maxRetriesPerRequest: 3,
            enableOfflineQueue: false
        });

        redis.on('error', (err) => {
            console.error('Redis connection error:', err);
        });
    }
    return redis;
};

const CACHE_DURATION = 3600; // 1 hour in seconds

const cacheService = {
    async get(key) {
        try {
            const client = getRedisClient();
            const data = await client.get(key);
            return data ? JSON.parse(data) : null;
        } catch (error) {
            console.error('Redis get error:', error);
            return null;
        }
    },

    async set(key, data, duration = CACHE_DURATION) {
        try {
            const client = getRedisClient();
            await client.setex(key, duration, JSON.stringify(data));
            return true;
        } catch (error) {
            console.error('Redis set error:', error);
            return false;
        }
    },

    async del(key) {
        try {
            const client = getRedisClient();
            await client.del(key);
            return true;
        } catch (error) {
            console.error('Redis delete error:', error);
            return false;
        }
    },

    async close() {
        try {
            if (redis) {
                await redis.quit();
                redis = null;
            }
        } catch (error) {
            console.error('Redis close error:', error);
        }
    }
};

export default cacheService;

================
File: src/utils/translator.js
================
// src/utils/translator.js
import axios from 'axios';
import { randomUUID } from 'crypto';
import dotenv from 'dotenv';

dotenv.config();

const subscriptionKey = process.env.AZURE_TRANSLATOR_KEY;
const endpoint = process.env.AZURE_TRANSLATOR_ENDPOINT;
const location = process.env.AZURE_TRANSLATOR_REGION;

console.log('Translator config:', { subscriptionKey, endpoint, location });

export const translateText = async (text, targetLanguage) => {
    if (!text || !targetLanguage) {
        throw new Error('Text and target language are required');
    }

    if (!subscriptionKey || !endpoint || !location) {
        console.error('Translation service not properly configured');
        return text; // Return original text if translation service is not configured
    }

    try {
        const response = await axios({
            baseURL: endpoint,
            url: '/translate',
            method: 'post',
            headers: {
                'Ocp-Apim-Subscription-Key': subscriptionKey,
                'Ocp-Apim-Subscription-Region': location,
                'Content-type': 'application/json',
                'X-ClientTraceId': randomUUID()
            },
            params: {
                'api-version': '3.0',
                'to': targetLanguage,
                'textType': 'html' // Support HTML content in answers
            },
            data: [{
                'text': text
            }],
            timeout: 10000 // 10 second timeout
        });

        if (response.data && response.data[0] && response.data[0].translations && response.data[0].translations[0]) {
            return response.data[0].translations[0].text;
        } else {
            throw new Error('Invalid translation response structure');
        }
    } catch (error) {
        console.error('Translation error:', {
            message: error.message,
            response: error.response?.data,
            status: error.response?.status,
            targetLanguage,
            textLength: text.length
        });

        // If we get a rate limit or temporary error, wait and retry once
        if (error.response?.status === 429 || error.response?.status === 500) {
            await new Promise(resolve => setTimeout(resolve, 2000));
            return translateText(text, targetLanguage);
        }

        return text; // Return original text as fallback
    }
};

================
File: src/views/admin/create-faq.ejs
================
<!-- src/views/admin/create-faq.ejs -->
<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10">
            <div class="card shadow-sm">
                <div class="card-header bg-white border-0 pt-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="card-title mb-0">Create New FAQ</h2>
                            <p class="text-muted mb-0">Add a new frequently asked question</p>
                        </div>
                        <a href="/admin" class="btn btn-outline-secondary">
                            <i class="ri-arrow-left-line me-2"></i>Back
                        </a>
                    </div>
                </div>
                <div class="card-body p-4">
                    <form action="/admin/faqs/create" method="POST" class="needs-validation" novalidate>
                        <!-- Question Field -->
                        <div class="mb-4">
                            <label for="question" class="form-label">
                                <i class="ri-question-line me-2"></i>Question
                            </label>
                            <input type="text"
                                   class="form-control form-control-lg"
                                   id="question"
                                   name="question"
                                   required
                                   placeholder="Enter your question here">
                            <div class="invalid-feedback">
                                Please provide a question
                            </div>
                        </div>

                        <!-- Answer Field -->
                        <div class="mb-4">
                            <label for="answer" class="form-label">
                                <i class="ri-chat-1-line me-2"></i>Answer
                            </label>
                            <textarea class="form-control"
                                    id="answer"
                                    name="answer"
                                    required
                                    placeholder="Provide a detailed answer"></textarea>
                            <div class="invalid-feedback">
                                Please provide an answer
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between align-items-center mt-4 pt-2">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="isActive" name="isActive" checked>
                                <label class="form-check-label" for="isActive">
                                    Make FAQ active immediately
                                </label>
                            </div>
                            <div class="d-flex gap-2">
                                <a href="/admin" class="btn btn-outline-secondary">
                                    <i class="ri-close-line me-2"></i>Cancel
                                </a>
                                <button type="submit" class="btn btn-primary">
                                    <i class="ri-save-line me-2"></i>Create FAQ
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Preview Card -->
            <div class="card shadow-sm mt-4">
                <div class="card-header bg-white border-0 py-3">
                    <h3 class="card-title mb-0">Preview</h3>
                </div>
                <div class="card-body">
                    <div id="previewQuestion" class="h5 mb-3">Your question will appear here</div>
                    <div id="previewAnswer" class="text-muted">Your answer will appear here</div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(79, 70, 229, 0.25);
}

.card {
    border: none;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
}

/* CKEditor customization */
.cke_chrome {
    border: 1px solid #e2e8f0 !important;
    border-radius: 0.5rem !important;
    box-shadow: none !important;
}

.cke_top {
    border-bottom: 1px solid #e2e8f0 !important;
    background: #f8fafc !important;
    padding: 8px !important;
    border-radius: 0.5rem 0.5rem 0 0 !important;
}

.cke_bottom {
    border-top: 1px solid #e2e8f0 !important;
    background: #f8fafc !important;
    padding: 6px 8px !important;
    border-radius: 0 0 0.5rem 0.5rem !important;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Form validation
    const form = document.querySelector('.needs-validation');
    const questionInput = document.getElementById('question');
    const previewQuestion = document.getElementById('previewQuestion');
    const previewAnswer = document.getElementById('previewAnswer');

    // Initialize CKEditor
    CKEDITOR.replace('answer', {
        height: '300px',
        removePlugins: 'elementspath,resize',
        toolbarGroups: [
            { name: 'styles', groups: ['styles'] },
            { name: 'basicstyles', groups: ['basicstyles', 'cleanup'] },
            { name: 'paragraph', groups: ['list', 'indent', 'blocks', 'align'] },
            { name: 'links' },
            { name: 'insert' },
            { name: 'tools' },
            { name: 'document', groups: ['mode'] }
        ],
        format_tags: 'p;h2;h3;h4',
        removeButtons: '',
        contentsCss: [
            'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'
        ],
        allowedContent: true,
        enterMode: CKEDITOR.ENTER_BR,
        // Update preview when content changes
        on: {
            change: function() {
                previewAnswer.innerHTML = this.getData();
            }
        }
    });

    // Live preview for question
    questionInput.addEventListener('input', function() {
        previewQuestion.textContent = this.value || 'Your question will appear here';
    });

    // Form validation
    form.addEventListener('submit', function(event) {
        if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
        }
        form.classList.add('was-validated');
    });
});
</script>

================
File: src/views/admin/dashboard.ejs
================
<!-- Stats Cards Row -->
<div class="row">
    <div class="col-12 col-md-6 col-lg-3 mb-4">
        <div class="card stat-card animate__animated animate__fadeInUp" style="animation-delay: 0.1s">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="text-muted mb-2">Total FAQs</h6>
                        <h2 class="mb-0"><%= faqs.length %></h2>
                    </div>
                    <div class="icon-box bg-primary bg-opacity-10">
                        <i class="ri-questionnaire-line text-primary"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-lg-3 mb-4">
        <div class="card stat-card animate__animated animate__fadeInUp" style="animation-delay: 0.2s">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="text-muted mb-2">With Translations</h6>
                        <h2 class="mb-0"><%= faqs.filter(f => f.translations && f.translations.size > 0).length %></h2>
                    </div>
                    <div class="icon-box bg-success bg-opacity-10">
                        <i class="ri-translate-2 text-success"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-lg-3 mb-4">
        <div class="card stat-card animate__animated animate__fadeInUp" style="animation-delay: 0.3s">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="text-muted mb-2">Active FAQs</h6>
                        <h2 class="mb-0"><%= faqs.filter(f => f.isActive).length %></h2>
                    </div>
                    <div class="icon-box bg-info bg-opacity-10">
                        <i class="ri-check-line text-info"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-lg-3 mb-4">
        <div class="card stat-card animate__animated animate__fadeInUp" style="animation-delay: 0.4s">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="text-muted mb-2">Languages</h6>
                        <h2 class="mb-0">4</h2>
                    </div>
                    <div class="icon-box bg-warning bg-opacity-10">
                        <i class="ri-global-line text-warning"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Main Content -->
<div class="row">
    <div class="col-12">
        <div class="card shadow-sm animate__animated animate__fadeInUp animate__delay-1s">
            <!-- Card Header with Actions -->
            <div class="card-header bg-white py-3">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h4 class="card-title mb-1">FAQ Management</h4>
                        <p class="text-muted mb-0">Manage your frequently asked questions</p>
                    </div>
                    <div class="d-flex gap-2">
                        <div class="search-box">
                            <input type="text" id="searchInput" class="form-control" placeholder="Search FAQs...">
                            <i class="ri-search-line"></i>
                        </div>
                        <a href="/admin/faqs/create" class="btn btn-primary d-flex align-items-center">
                            <i class="ri-add-line me-2"></i>Create New FAQ
                        </a>
                    </div>
                </div>
            </div>

            <!-- Card Body -->
            <div class="card-body p-0">
                <% if (faqs && faqs.length > 0) { %>
                    <div class="table-responsive">
                        <table class="table table-hover mb-0 custom-table">
                            <thead>
                                <tr>
                                    <th style="width: 40%" class="ps-4">Question</th>
                                    <th>Translations</th>
                                    <th>Created At</th>
                                    <th>Status</th>
                                    <th class="text-end pe-4">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% faqs.forEach((faq, index) => { %>
                                    <tr class="animate__animated animate__fadeIn row-hover" style="animation-delay: <%= index * 0.1 %>s">
                                        <td class="ps-4">
                                            <div class="d-flex align-items-center">
                                                <div class="question-icon">
                                                    <i class="ri-question-line"></i>
                                                </div>
                                                <span class="ms-3"><%= faq.question %></span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="translation-badges">
                                                <span class="badge bg-success-soft me-1">EN</span>
                                                <% if (faq.translations) { %>
                                                    <% ['hi', 'es', 'bn'].forEach(lang => { %>
                                                        <% if (faq.translations.get(lang)) { %>
                                                            <span class="badge bg-info-soft me-1 translation-badge" 
                                                                  data-bs-toggle="tooltip" 
                                                                  data-bs-placement="top"
                                                                  data-bs-html="true"
                                                                  title="<div class='translation-tooltip'><strong><%= lang.toUpperCase() %></strong><br><%= faq.translations.get(lang).question %></div>">
                                                                <%= lang.toUpperCase() %>
                                                                <i class="ri-translate-2 ms-1"></i>
                                                            </span>
                                                        <% } %>
                                                    <% }) %>
                                                <% } %>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center text-muted">
                                                <i class="ri-calendar-line me-2"></i>
                                                <%= new Date(faq.createdAt).toLocaleDateString('en-US', { 
                                                    year: 'numeric', 
                                                    month: 'short', 
                                                    day: 'numeric' 
                                                }) %>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" role="switch" 
                                                       id="status_<%= faq._id %>" 
                                                       <%= faq.isActive ? 'checked' : '' %>>
                                                <label class="form-check-label" for="status_<%= faq._id %>">
                                                    <span class="status-badge <%= faq.isActive ? 'active' : 'inactive' %>">
                                                        <%= faq.isActive ? 'Active' : 'Inactive' %>
                                                    </span>
                                                </label>
                                            </div>
                                        </td>
                                        <td class="text-end pe-4">
                                            <div class="action-buttons">
                                                <a href="/admin/faqs/<%= faq._id %>/edit" 
                                                   class="btn btn-icon btn-light me-2"
                                                   data-bs-toggle="tooltip"
                                                   data-bs-placement="top"
                                                   title="Edit FAQ">
                                                    <i class="ri-edit-line"></i>
                                                </a>
                                                <form action="/admin/faqs/<%= faq._id %>?_method=DELETE" 
                                                      method="POST" 
                                                      class="d-inline-block"
                                                      onsubmit="return confirm('Are you sure you want to delete this FAQ?');">
                                                    <button type="submit" 
                                                            class="btn btn-icon btn-light"
                                                            data-bs-toggle="tooltip"
                                                            data-bs-placement="top"
                                                            title="Delete FAQ">
                                                        <i class="ri-delete-bin-line text-danger"></i>
                                                    </button>
                                                </form>
                                            </div>
                                        </td>
                                    </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                <% } else { %>
                    <div class="empty-state text-center py-5 animate__animated animate__fadeIn">
                        <div class="empty-state-icon mb-3">
                            <i class="ri-inbox-line"></i>
                        </div>
                        <h3>No FAQs Found</h3>
                        <p class="text-muted">Get started by creating your first FAQ</p>
                        <a href="/admin/faqs/create" class="btn btn-primary mt-3">
                            <i class="ri-add-line me-2"></i>Create FAQ
                        </a>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0 pb-0">
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <div class="delete-icon mb-4">
                    <i class="ri-delete-bin-line"></i>
                </div>
                <h4>Delete FAQ</h4>
                <p class="text-muted">Are you sure you want to delete this FAQ? This action cannot be undone.</p>
            </div>
            <div class="modal-footer border-0 pt-0">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="POST" style="display: inline;">
                    <input type="hidden" name="_method" value="DELETE">
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
function confirmDelete(faqId) {
    if (confirm('Are you sure you want to delete this FAQ?')) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `${window.location.origin}/admin/faqs/${faqId}?_method=DELETE`;
        
        // Add CSRF token if you're using it
        // const csrfToken = document.createElement('input');
        // csrfToken.type = 'hidden';
        // csrfToken.name = '_csrf';
        // csrfToken.value = 'your-csrf-token';
        // form.appendChild(csrfToken);
        
        document.body.appendChild(form);
        form.submit();
    }
}

// Update the event listeners for delete buttons
document.addEventListener('DOMContentLoaded', function() {
    const deleteButtons = document.querySelectorAll('.delete-btn');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const faqId = this.getAttribute('data-faq-id');
            confirmDelete(faqId);
        });
    });
});
</script>
<style>
/* Custom Properties */
:root {
    --primary-color: #4F46E5;
    --success-color: #10B981;
    --warning-color: #F59E0B;
    --danger-color: #EF4444;
    --info-color: #3B82F6;
}

/* Card Styles */
.card {
    border: none;
    transition: all 0.3s ease;
}

.stat-card {
    border-radius: 1rem;
}

.stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

/* Icon Box */
.icon-box {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.icon-box i {
    font-size: 24px;
}

/* Search Box */
.search-box {
    position: relative;
}

.search-box input {
    padding-right: 40px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
}

.search-box i {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #94a3b8;
}

/* Table Styles */
.custom-table {
    margin: 0;
}

.custom-table thead th {
    background: #f8fafc;
    border-top: none;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.75rem;
    letter-spacing: 0.5px;
    color: #64748b;
}

.row-hover {
    cursor: pointer;
    transition: all 0.3s ease;
}

.row-hover:hover {
    background-color: #f8fafc !important;
    transform: scale(1.001);
}

/* Question Icon */
.question-icon {
    width: 32px;
    height: 32px;
    background: var(--primary-color);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.question-icon i {
    color: white;
    font-size: 18px;
}

/* Translation Badges */
.translation-badges {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.badge {
    padding: 0.5rem 0.75rem;
    font-weight: 500;
    border-radius: 6px;
}

.bg-success-soft {
    background: rgba(16, 185, 129, 0.1);
    color: var(--success-color);
}

.bg-info-soft {
    background: rgba(59, 130, 246, 0.1);
    color: var(--info-color);
}

.translation-badge {
    cursor: pointer;
    transition: all 0.3s ease;
}

.translation-badge:hover {
    transform: translateY(-2px);
}

/* Status Badge */
.status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.875rem;
}

.status-badge.active {
    background: rgba(16, 185, 129, 0.1);
    color: var(--success-color);
}

.status-badge.inactive {
    background: rgba(239, 68, 68, 0.1);
    color: var(--danger-color);
}

/* Action Buttons */
.btn-icon {
    width: 36px;
    height: 36px;
    padding: 0;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px;
    transition: all 0.3s ease;
}

.btn-icon:hover {
    transform: translateY(-2px);
}


/* Empty State */
.empty-state-icon

================
File: src/views/admin/edit-faq.ejs
================
<!-- src/views/admin/edit-faq.ejs -->
<div class="container py-4">
    <div class="row">
        <div class="col-12">
            <!-- Main Edit Card -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white border-0 pt-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="card-title mb-0">Edit FAQ</h2>
                            <p class="text-muted mb-0">Update FAQ content and translations</p>
                        </div>
                        <a href="/admin" class="btn btn-outline-secondary">
                            <i class="ri-arrow-left-line me-2"></i>Back to Dashboard
                        </a>
                    </div>
                </div>
                <div class="card-body p-4">
                    <form action="/admin/faqs/<%= faq._id %>?_method=PUT" method="POST" class="needs-validation" novalidate>
                        <!-- English Content -->
                        <div class="mb-4">
                            <h5 class="mb-3 text-primary">
                                <i class="ri-english-input me-2"></i>English Content
                            </h5>
                            <div class="mb-3">
                                <label for="question" class="form-label">Question</label>
                                <input type="text" 
                                       class="form-control form-control-lg" 
                                       id="question" 
                                       name="question" 
                                       value="<%= faq.question %>" 
                                       required>
                            </div>
                            <div class="mb-3">
                                <label for="answer" class="form-label">Answer</label>
                                <textarea class="form-control editor" 
                                          id="answer" 
                                          name="answer" 
                                          required><%- faq.answer %></textarea>
                            </div>
                        </div>

                        <!-- Translations Section -->
                        <div class="translations-section mt-5">
                            <h5 class="mb-4">
                                <i class="ri-translate-2 me-2"></i>Translations
                            </h5>
                            
                            <div class="row">
                                <!-- Hindi Translation -->
                                <div class="col-md-4 mb-4">
                                    <div class="card h-100 border-0 shadow-sm">
                                        <div class="card-header bg-light">
                                            <h6 class="mb-0">
                                                <span class="badge bg-primary me-2">HI</span>
                                                Hindi Translation
                                            </h6>
                                        </div>
                                        <div class="card-body">
                                            <p class="mb-2 text-muted small">Question:</p>
                                            <p class="mb-3"><%= faq.translations.get('hi')?.question || 'Not translated' %></p>
                                            <p class="mb-2 text-muted small">Answer:</p>
                                            <div class="translation-content">
                                                <%- faq.translations.get('hi')?.answer || 'Not translated' %>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Spanish Translation -->
                                <div class="col-md-4 mb-4">
                                    <div class="card h-100 border-0 shadow-sm">
                                        <div class="card-header bg-light">
                                            <h6 class="mb-0">
                                                <span class="badge bg-success me-2">ES</span>
                                                Spanish Translation
                                            </h6>
                                        </div>
                                        <div class="card-body">
                                            <p class="mb-2 text-muted small">Question:</p>
                                            <p class="mb-3"><%= faq.translations.get('es')?.question || 'Not translated' %></p>
                                            <p class="mb-2 text-muted small">Answer:</p>
                                            <div class="translation-content">
                                                <%- faq.translations.get('es')?.answer || 'Not translated' %>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Bengali Translation -->
                                <div class="col-md-4 mb-4">
                                    <div class="card h-100 border-0 shadow-sm">
                                        <div class="card-header bg-light">
                                            <h6 class="mb-0">
                                                <span class="badge bg-info me-2">BN</span>
                                                Bengali Translation
                                            </h6>
                                        </div>
                                        <div class="card-body">
                                            <p class="mb-2 text-muted small">Question:</p>
                                            <p class="mb-3"><%= faq.translations.get('bn')?.question || 'Not translated' %></p>
                                            <p class="mb-2 text-muted small">Answer:</p>
                                            <div class="translation-content">
                                                <%- faq.translations.get('bn')?.answer || 'Not translated' %>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between align-items-center mt-4 pt-2">
                            <div class="form-check">
                                <input class="form-check-input" 
                                       type="checkbox" 
                                       id="updateTranslations" 
                                       name="updateTranslations" 
                                       checked>
                                <label class="form-check-label" for="updateTranslations">
                                    Update translations automatically
                                </label>
                            </div>
                            <div class="d-flex gap-2">
                                <a href="/admin" class="btn btn-outline-secondary">
                                    <i class="ri-close-line me-2"></i>Cancel
                                </a>
                                <button type="submit" class="btn btn-primary">
                                    <i class="ri-save-line me-2"></i>Update FAQ
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.translation-content {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 0.5rem;
    min-height: 100px;
    max-height: 200px;
    overflow-y: auto;
}

.card {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;
}

.badge {
    font-size: 0.8rem;
    padding: 0.35em 0.65em;
}

.form-control:focus {
    border-color: #4F46E5;
    box-shadow: 0 0 0 0.2rem rgba(79, 70, 229, 0.25);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize form validation
    const form = document.querySelector('.needs-validation');
    form.addEventListener('submit', function(event) {
        if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
        }
        form.classList.add('was-validated');
    });

    // Initialize CKEditor with modern configuration
    CKEDITOR.replace('answer', {
        height: '300px',
        removePlugins: 'elementspath,resize',
        toolbarGroups: [
            { name: 'styles', groups: ['styles'] },
            { name: 'basicstyles', groups: ['basicstyles', 'cleanup'] },
            { name: 'paragraph', groups: ['list', 'indent', 'blocks', 'align'] },
            { name: 'links' },
            { name: 'insert' },
            { name: 'tools' },
            { name: 'document', groups: ['mode'] }
        ],
        format_tags: 'p;h2;h3;h4',
        removeButtons: '',
        contentsCss: [
            'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'
        ],
        allowedContent: true,
        enterMode: CKEDITOR.ENTER_BR,
        height: '250px'
    });
});
</script>

================
File: src/views/layouts/main.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FAQ Admin Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Remix Icons -->
    <link href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css" rel="stylesheet">
    <!-- Animate.css -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    
    <!-- CKEditor (latest version) -->
    <script src="https://cdn.ckeditor.com/4.25.0/standard/ckeditor.js"></script>
    
    <!-- Bootstrap JS (place before closing body tag) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        :root {
            --primary-color: #4F46E5;
            --secondary-color: #34D399;
            --background-color: #F3F4F6;
            --card-background: #FFFFFF;
        }

        body {
            background-color: var(--background-color);
            font-family: 'Inter', sans-serif;
        }

        .navbar {
            background: linear-gradient(135deg, var(--primary-color), #818CF8);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .navbar-brand {
            font-weight: 700;
            font-size: 1.5rem;
            color: white !important;
            transition: transform 0.3s ease;
        }

        .navbar-brand:hover {
            transform: translateY(-2px);
        }

        .card {
            border: none;
            border-radius: 1rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            background: var(--card-background);
            opacity: 0;
            animation: fadeIn 0.5s ease forwards;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

        .btn {
            border-radius: 0.5rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background: var(--primary-color);
            border: none;
        }

        .btn-primary:hover {
            background: #4338CA;
            transform: translateY(-2px);
        }

        .btn-danger {
            background: #EF4444;
            border: none;
        }

        .btn::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: -100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: 0.5s;
        }

        .btn:hover::after {
            left: 100%;
        }

        .table {
            border-radius: 1rem;
            overflow: hidden;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .table th {
            background: var(--primary-color);
            color: white;
            font-weight: 600;
            border: none;
        }

        .table tr {
            transition: all 0.3s ease;
        }

        .table tr:hover {
            background-color: #F3F4F6;
            transform: scale(1.01);
        }

        .alert {
            border-radius: 0.5rem;
            animation: slideIn 0.5s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateY(-100%);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Form Styles */
        .form-control {
            border-radius: 0.5rem;
            border: 2px solid #E5E7EB;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);
        }

        .form-label {
            font-weight: 600;
            color: #374151;
        }

        /* Loading Animation */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>

<body>
    <!-- Loading Overlay -->
    <div class="loading-overlay">
        <div class="spinner"></div>
    </div>

    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand" href="/admin">
                <i class="ri-questionnaire-line me-2"></i>FAQ Admin
            </a>
        </div>
    </nav>

    <div class="container mt-4">
        <% if (messages.error) { %>
            <div class="alert alert-danger animate__animated animate__fadeInDown">
                <i class="ri-error-warning-line me-2"></i>
                <%= messages.error %>
            </div>
        <% } %>
        <% if (messages.success) { %>
            <div class="alert alert-success animate__animated animate__fadeInDown">
                <i class="ri-checkbox-circle-line me-2"></i>
                <%= messages.success %>
            </div>
        <% } %>
        
        <%- body %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize CKEditor
            document.querySelectorAll('.editor').forEach(editor => {
                CKEDITOR.replace(editor);
            });

            // Show loading overlay on form submissions
            document.querySelectorAll('form').forEach(form => {
                form.addEventListener('submit', () => {
                    document.querySelector('.loading-overlay').style.display = 'flex';
                });
            });

            // Auto-hide alerts after 5 seconds
            document.querySelectorAll('.alert').forEach(alert => {
                setTimeout(() => {
                    alert.classList.add('animate__fadeOutUp');
                    setTimeout(() => alert.remove(), 1000);
                }, 5000);
            });

            // Confirm delete actions
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    if (!confirm('Are you sure you want to delete this item?')) {
                        e.preventDefault();
                    }
                });
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize CKEditor for each editor instance
            document.querySelectorAll('.editor').forEach(function(textarea) {
                CKEDITOR.replace(textarea.id, {
                    height: '300px',
                    removePlugins: 'elementspath,resize',
                    toolbarGroups: [
                        { name: 'clipboard',   groups: [ 'clipboard', 'undo' ] },
                        { name: 'editing',     groups: [ 'find', 'selection', 'spellchecker' ] },
                        { name: 'links' },
                        { name: 'insert' },
                        { name: 'forms' },
                        { name: 'tools' },
                        { name: 'document',    groups: [ 'mode', 'document', 'doctools' ] },
                        { name: 'others' },
                        '/',
                        { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ] },
                        { name: 'paragraph',   groups: [ 'list', 'indent', 'blocks', 'align', 'bidi' ] },
                        { name: 'styles' },
                        { name: 'colors' }
                    ],
                    removeButtons: '',
                    format_tags: 'p;h2;h3;h4',
                    contentsCss: [
                        'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'
                    ],
                    allowedContent: true,
                    enterMode: CKEDITOR.ENTER_BR
                });
            });
        });
        </script>
</body>
</html>

================
File: src/views/welcome.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FAQ Translation System</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
    <div class="min-h-screen flex items-center justify-center">
        <div class="max-w-2xl mx-auto text-center p-8 bg-white rounded-lg shadow-lg">
            <h1 class="text-4xl font-bold text-gray-800 mb-6">Welcome to FAQ Translation System</h1>
            
            <p class="text-gray-600 text-lg mb-8">
                A powerful multilingual FAQ management system with automatic translation capabilities.
            </p>
            
            <div class="space-y-4">
                <a href="https://faqs-translate-bfd.onrender.com/admin" 
                   class="inline-block bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-lg transition duration-300">
                    Go to Admin Panel
                </a>
                
                <div class="mt-8 text-sm text-gray-500">
                    <p>Access the admin panel to manage your FAQs</p>
                </div>
            </div>
        </div>
    </div>
</body>
</html>

================
File: src/app.js
================
// src/app.js
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import mongoose from 'mongoose';
import session from 'express-session';
import flash from 'connect-flash';
import methodOverride from 'method-override';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import expressLayouts from 'express-ejs-layouts';
import dotenv from 'dotenv';
import adminRoutes from './routes/admin.js';
import apiRoutes from './routes/api.js';

// Load environment variables
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();

// Method Override configuration - IMPORTANT: Place this before other middleware
app.use(methodOverride('_method'));

// View engine setup
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(expressLayouts);
app.set('layout', 'layouts/main');

// Enhanced Helmet configuration with CSP
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: [
                "'self'",
                "'unsafe-inline'",
                "'unsafe-eval'",
                "cdn.jsdelivr.net",
                "cdn.ckeditor.com",
                "cke4.ckeditor.com"
            ],
            connectSrc: [
                "'self'",
                "cke4.ckeditor.com"
            ],
            imgSrc: [
                "'self'",
                "data:",
                "cdn.jsdelivr.net",
                "cke4.ckeditor.com"
            ],
            styleSrc: [
                "'self'",
                "'unsafe-inline'",
                "cdn.jsdelivr.net",
                "cdn.ckeditor.com"
            ],
            fontSrc: [
                "'self'",
                "cdn.jsdelivr.net"
            ],
            formAction: ["'self'"],
            upgradeInsecureRequests: []
        }
    },
    crossOriginEmbedderPolicy: false
}));

// CORS configuration
app.use(cors());
app.use(morgan('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Session configuration
const sessionConfig = {
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: process.env.NODE_ENV === 'production',
        httpOnly: true,
        maxAge: 24 * 60 * 60 * 1000 // 24 hours
    }
};

if (app.get('env') === 'production') {
    app.set('trust proxy', 1);
    sessionConfig.cookie.secure = true;
}

app.use(session(sessionConfig));
app.use(flash());

// Make flash messages available to all views
app.use((req, res, next) => {
    res.locals.messages = req.flash();
    next();
});

// Database connection
mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('MongoDB connection error:', err));

// Base URL middleware
app.use((req, res, next) => {
    // Use request protocol and host for base URL
    res.locals.baseUrl = `${req.protocol}://${req.get('host')}`;
    next();
});

// Routes
app.use('/admin', adminRoutes);
app.use('/api', apiRoutes);

// Health check
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'ok' });
});

app.get('/', (req, res) => {
    res.render('welcome', {
        title: 'Welcome to FAQ Translation System',
        layout: false
    });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ message: 'Something went wrong!' });
});

export default app;

================
File: src/server.js
================
// src/server.js
import app from './app.js';
import dotenv from 'dotenv';

dotenv.config();

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

================
File: test/integration/admin.test.js
================
// test/integration/admin.test.js
import { expect } from 'chai';
import request from 'supertest';
import mongoose from 'mongoose';
import app from '../../src/app.js';
import { FAQ } from '../../src/models/faq.js';
import { setupTestDB } from '../test-config.js';

describe('Admin Routes', () => {
    setupTestDB();

    describe('POST /admin/faqs/create', () => {
        it('should create new FAQ with translations', async () => {
            const res = await request(app)
                .post('/admin/faqs/create')
                .send({
                    question: 'Test Question?',
                    answer: 'Test Answer'
                });

            expect(res.status).to.equal(302); // Redirect after success
            
            const faq = await FAQ.findOne({ question: 'Test Question?' });
            expect(faq).to.exist;
        });
    });

    describe('GET /admin/faqs/:id/edit', () => {
        it('should get FAQ edit page', async () => {
            // First create a FAQ
            const faq = new FAQ({
                question: 'Test Question',
                answer: 'Test Answer',
                isActive: true
            });
            await faq.save();

            // Then try to get its edit page
            const res = await request(app)
                .get(`/admin/faqs/${faq._id}/edit`);
            
            expect(res.status).to.equal(200);
        });
    });

    describe('PUT /admin/faqs/:id', () => {
        it('should update FAQ', async () => {
            // Create a FAQ first
            const faq = new FAQ({
                question: 'Original Question',
                answer: 'Original Answer',
                isActive: true
            });
            await faq.save();

            // Update the FAQ
            await request(app)
                .put(`/admin/faqs/${faq._id}`)
                .send({
                    question: 'Updated Question',
                    answer: 'Updated Answer'
                })
                .expect(302); // Redirect after success

            // Verify the update
            const updatedFaq = await FAQ.findById(faq._id);
            expect(updatedFaq.question).to.equal('Updated Question');
            expect(updatedFaq.answer).to.equal('Updated Answer');
        });
    });

    describe('DELETE /admin/faqs/:id', () => {
        it('should delete FAQ', async () => {
            // Create a FAQ first
            const faq = new FAQ({
                question: 'Test Question',
                answer: 'Test Answer'
            });
            await faq.save();

            // Delete the FAQ
            const res = await request(app)
                .delete(`/admin/faqs/${faq._id}`);

            expect(res.status).to.equal(302); // Redirect after success

            // Verify deletion
            const deletedFaq = await FAQ.findById(faq._id);
            expect(deletedFaq).to.be.null;
        });
    });
});

================
File: test/integration/api.test.js
================
// test/integration/api.test.js
import { expect } from 'chai';
import request from 'supertest';
import mongoose from 'mongoose';
import app from '../../src/app.js';
import { FAQ } from '../../src/models/faq.js';
import { setupTestDB } from '../test-config.js';
import cacheService from '../../src/utils/cache.js';

describe('FAQ API', () => {
    setupTestDB();

    beforeEach(async () => {
        await FAQ.deleteMany({});
        // Clear cache
        const keys = ['faqs_en', 'faqs_es', 'faqs_hi', 'faqs_bn'];
        await Promise.all(keys.map(key => cacheService.del(key)));
    });

    describe('GET /api/faqs', () => {
        it('should return empty array initially', async () => {
            const response = await request(app)
                .get('/api/faqs');
            
            expect(response.status).to.equal(200);
            expect(response.body).to.be.an('array');
            expect(response.body).to.have.lengthOf(0);
        });

        it('FAQ should be returned in different languages', async function() {
            this.timeout(5000); // Increase timeout for translation

            // Create a test FAQ with translations
            const faq = new FAQ({
                question: 'Test Question?',
                answer: 'Test Answer',
                isActive: true,
                translations: new Map([
                    ['es', {
                        question: '¿Pregunta de prueba?',
                        answer: 'Respuesta de prueba'
                    }]
                ])
            });
            await faq.save();

            // Test English (default)
            const enResponse = await request(app)
                .get('/api/faqs');
            
            expect(enResponse.status).to.equal(200);
            expect(enResponse.body).to.be.an('array');
            expect(enResponse.body[0].question).to.equal('Test Question?');

            // Test Spanish
            const esResponse = await request(app)
                .get('/api/faqs?lang=es');
            
            expect(esResponse.status).to.equal(200);
            expect(esResponse.body).to.be.an('array');
            expect(esResponse.body[0].question).to.equal('¿Pregunta de prueba?');
        });
    });

    describe('GET /api/faqs/:id', () => {
        it('should return single FAQ with translations', async function() {
            this.timeout(5000); // Increase timeout for translation

            const faq = new FAQ({
                question: 'Single FAQ Test?',
                answer: 'Single FAQ Answer',
                isActive: true,
                translations: new Map([
                    ['es', {
                        question: '¿Prueba individual?',
                        answer: 'Respuesta individual'
                    }]
                ])
            });
            await faq.save();

            const response = await request(app)
                .get(`/api/faqs/${faq._id}?lang=es`);

            expect(response.status).to.equal(200);
            expect(response.body.question).to.equal('¿Prueba individual?');
        });
    });
});

================
File: test/unit/basic.test.js
================
import { expect } from 'chai';
import '../../src/models/faq.js';

describe('Basic Test', () => {
  it('should run a test', () => {
    expect(true).to.be.true;
  });
});

================
File: test/unit/faq.model.test.js
================
// test/unit/faq.model.test.js
import { expect } from 'chai';
import { FAQ } from '../../src/models/faq.js';
import { setupTestDB } from '../test-config.js';

describe('FAQ Model', () => {
    setupTestDB();

    it('should create a new FAQ', async () => {
        const faq = new FAQ({
            question: 'Test Question',
            answer: 'Test Answer'
        });

        const savedFaq = await faq.save();
        expect(savedFaq.question).to.equal('Test Question');
        expect(savedFaq.answer).to.equal('Test Answer');
    });

    it('should get translation', async () => {
        const faq = new FAQ({
            question: 'Test Question',
            answer: 'Test Answer',
            translations: new Map([
                ['hi', { question: 'टेस्ट प्रश्न', answer: 'टेस्ट उत्तर' }]
            ])
        });

        await faq.save();
        const translation = faq.getTranslation('hi');
        expect(translation.question).to.equal('टेस्ट प्रश्न');
    });
});

================
File: test/setup.js
================
// test/setup.js
import chai from 'chai';
import chaiHttp from 'chai-http';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

chai.use(chaiHttp);
chai.use(sinonChai);

global.expect = chai.expect;
global.sinon = sinon;
global.__filename = __filename;
global.__dirname = __dirname;

================
File: test/test-config.js
================
// test/test-config.js
import mongoose from 'mongoose';
import { MongoMemoryServer } from 'mongodb-memory-server';
import cacheService from '../src/utils/cache.js';
import dotenv from 'dotenv';

dotenv.config();

export const setupTestDB = () => {
    let mongod;

    before(async () => {
        try {
            if (mongoose.connection.readyState === 0) {
                await mongoose.connect(process.env.MONGODB_URI);
            }
        } catch (error) {
            console.error('MongoDB connection error:', error);
            throw error;
        }
    });

    beforeEach(async () => {
        try {
            // Clear all collections
            const collections = mongoose.connection.collections;
            await Promise.all(
                Object.values(collections).map(async (collection) => {
                    await collection.deleteMany({});
                })
            );
        } catch (error) {
            console.error('Error clearing collections:', error);
            throw error;
        }
    });

    after(async () => {
        try {
            // Close connections
            await Promise.all([
                mongoose.connection.close(),
                cacheService.close()
            ]);
        } catch (error) {
            console.error('Error closing connections:', error);
            throw error;
        }
    });
};

================
File: .editorconfig
================
root = true
  
  [*]
  end_of_line = lf
  insert_final_newline = true
  trim_trailing_whitespace = true
  charset = utf-8
  
  [*.{js,json}]
  indent_style = space
  indent_size = 2
  
  [*.md]
  trim_trailing_whitespace = false

================
File: .gitignore
================
node_modules/
.env
.DS_Store
coverage/
dist/

================
File: .mocharc.json
================
{
    "extension": ["js"],
    "spec": "test/**/*.test.js",
    "require": "test/setup.js",
    "exit": true,
    "timeout": 10000,
    "experimental-specifier-resolution": "node",
    "node-option": [
      "experimental-specifier-resolution=node",
      "no-warnings"
    ]
  }

================
File: .prettierrc
================


================
File: docker-compose.yml
================
version: '3.8'

services:
  app:
    build: .
    ports:
      - "${PORT}:${PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - GOOGLE_TRANSLATE_API_KEY=${GOOGLE_TRANSLATE_API_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
      - AZURE_TRANSLATOR_KEY=${AZURE_TRANSLATOR_KEY}
      - AZURE_TRANSLATOR_ENDPOINT=${AZURE_TRANSLATOR_ENDPOINT}
      - AZURE_TRANSLATOR_REGION=${AZURE_TRANSLATOR_REGION}

    depends_on:
      - mongo
      - redis

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  mongodb_data:
  redis_data:

================
File: Dockerfile
================
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]

================
File: eslintrc.js
================
// .eslintrc.js
module.exports = {
    env: {
      node: true,
      mocha: true,
      es2021: true
    },
    extends: [
      'eslint:recommended',
      'plugin:node/recommended',
      'prettier'
    ],
    parserOptions: {
      ecmaVersion: 2021
    },
    rules: {
      'no-console': ['warn', { allow: ['warn', 'error'] }],
      'node/exports-style': ['error', 'module.exports'],
      'node/file-extension-in-import': ['error', 'always'],
      'node/prefer-global/buffer': ['error', 'always'],
      'node/prefer-global/console': ['error', 'always'],
      'node/prefer-global/process': ['error', 'always'],
      'node/prefer-global/url-search-params': ['error', 'always'],
      'node/prefer-global/url': ['error', 'always'],
      'node/prefer-promises/dns': 'error',
      'node/prefer-promises/fs': 'error'
    }
  };
  
  // .prettierrc

  
  // .editorconfig

================
File: package.json
================
{
  "name": "faq-translation-system",
  "version": "1.0.0",
  "main": "src/server.js",
  "type": "module",
  "scripts": {
    "start": "node src/server.js",
    "dev": "nodemon src/server.js",
    "test": "mocha --exit --recursive test/",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write ."
  },
  "dependencies": {
    "@google-cloud/translate": "^8.0.0",
    "@vitalets/google-translate-api": "^9.2.1",
    "axios": "^1.7.9",
    "ckeditor4": "^4.25.0",
    "connect-flash": "^0.1.1",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "ejs": "^3.1.10",
    "express": "^4.21.2",
    "express-ejs-layouts": "^2.5.1",
    "express-session": "^1.18.1",
    "helmet": "^8.0.0",
    "ioredis": "^5.4.2",
    "method-override": "^3.0.0",
    "mongoose": "^8.9.6",
    "morgan": "^1.10.0"
  },
  "devDependencies": {
    "@babel/core": "^7.26.7",
    "@babel/register": "^7.25.9",
    "chai": "^5.0.0",
    "chai-http": "^4.4.0",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^10.0.1",
    "jest": "^29.7.0",
    "mocha": "^11.1.0",
    "mongodb-memory-server": "^10.1.3",
    "nodemon": "^3.1.9",
    "prettier": "^3.4.2",
    "sinon": "^19.0.2",
    "sinon-chai": "^4.0.0",
    "supertest": "^7.0.0"
  }
}

================
File: Readme.md
================
# FAQ Translation System

A robust multilingual FAQ management system built with Node.js, Express, and MongoDB. The system supports dynamic translation of FAQs into multiple languages with advanced caching mechanisms for optimal performance.


## Public URLs

- **Wait for 5-10s for it to load as it is on free tier temporary**

- **Production URL**: [https://faqs-translate-bfd.onrender.com](https://faqs-translate-bfd.onrender.com)
- **Test/Staging URL**: [https://faqs-translate-bfd.onrender.com](https://faqs-translate-bfd.onrender.com)


## Screenshots
![Screenshot of the Dashboard](public/1.png)
![Screenshot of the Dashboard](public/2.png)
![Screenshot of the Dashboard](public/3.png)
![Screenshot of the Dashboard](public/4.png)
![Screenshot of the Dashboard](public/5.png)


##  Features

- Multi-language FAQ management with automatic translation
- WYSIWYG editor for rich text content
- Redis caching for improved performance
- RESTful API with language selection support
- Secure admin panel for content management
- Comprehensive test coverage
- Docker support for easy deployment
- MongoDB Atlas Cloud integration
- Express session management with Flash messages
- Helmet security middleware
- CORS enabled
- Method override support
- EJS templating with layouts

##  Technology Stack

- **Backend**: Node.js, Express.js
- **Database**: MongoDB Atlas Cloud
- **Caching**: Redis Cloud
- **Testing**: Mocha/Chai
- **Container**: Docker
- **Template Engine**: EJS
- **Code Quality**: ESLint, Prettier
- **Version Control**: Git
- **Security**: Helmet, CORS
- **Logging**: Morgan
- **Session Management**: express-session
- **Flash Messages**: connect-flash


##  Admin Testing

### Test Admin Credentials
```
URL: https://faqs-translate-bfd.onrender.com/admin

```

1. **FAQ Management Testing**
   ```bash
   # Create FAQ
   curl -X POST https://faqs-translate-bfd.onrender.com/admin/faqs/create \
     -H "Content-Type: application/json" \
     -H "Cookie: session=your_session_cookie" \
     -d '{
       "question": "Test Question",
       "answer": "<p>Test Answer</p>"
     }'
    ```

### Admin Testing Checklist

1. **Mandatory Tests**
   - [✅] Session persistence

2. **FAQ Management Tests**
   - [✅]  Create new FAQ
   - [✅]  Edit existing FAQ
   - [✅]  Delete FAQ
   - [✅]  View FAQ list
   - [✅]  Search FAQs

3. **Translation Tests**
   - [✅]  Auto-translation on FAQ creation
   - [✅]  Manual translation override
   - [✅]  Translation preview
   - [✅]  Multi-language support verification

4. **WYSIWYG Editor Tests**
   - [✅]  Rich text formatting
   - [✅]  Image upload
   - [✅]  HTML cleaning
   - [✅]  Content preview

5. **Cache Management Tests**
   - [✅]  Cache creation
   - [✅]  Cache invalidation
   - [✅]  Cache update
   - [✅]  Performance verification


##  Prerequisites

- Node.js (v14 or higher)
- MongoDB Atlas account
- Redis Cloud account
- Docker and Docker Compose (optional)
- Google Translate API credentials or Azure

##  Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/faq-translation-system.git
cd faq-translation-system
```

2. Install dependencies:
```bash
npm install
```

3. Configure environment variables:
```bash
cp .env.example .env
```

Required environment variables:
```env
PORT=3000
MONGODB_URI=your_mongodb_atlas_uri
REDIS_URL=your_redis_cloud_url
SESSION_SECRET=your_session_secret
GOOGLE_TRANSLATE_API_KEY=your_google_translate_api_key
NODE_ENV=development_mode
AZURE_TRANSLATOR_KEY=your_acuze_api_key
AZURE_TRANSLATOR_ENDPOINT=your_azure_endppint
AZURE_TRANSLATOR_REGION=your_azure_region
```

4. Run the application:
```bash
# Development mode
npm run dev

# Production mode
npm start
```

##  API Routes

### API Endpoints
Base URL: `/api`

| Method | Route | Description |
|--------|-------|-------------|
| GET | `/api/faqs` | Retrieve all FAQs. Supports language query parameter (`?lang=`) |
| GET | `/api/faqs/search` | Search FAQs with query parameters |
| GET | `/api/faqs/:id` | Retrieve a specific FAQ by ID |

### Admin Routes
Base URL: `/admin`

| Method | Route | Description |
|--------|-------|-------------|
| GET | `/admin` | Admin dashboard |
| GET | `/admin/faqs/create` | Show FAQ creation form |
| POST | `/admin/faqs/create` | Create new FAQ |
| GET | `/admin/faqs/:id/edit` | Show FAQ edit form |
| PUT | `/admin/faqs/:id` | Update existing FAQ |
| DELETE | `/admin/faqs/:id` | Delete FAQ |

### Example API Usage

```bash
# Get all FAQs
curl http://localhost:3000/api/faqs

# Get FAQs in Hindi
curl http://localhost:3000/api/faqs?lang=hi

# Search FAQs
curl http://localhost:3000/api/faqs/search?q=payment&lang=en

# Get specific FAQ
curl http://localhost:3000/api/faqs/123456789
```

### Example Admin API Usage

```bash
# Create new FAQ (requires authentication)
curl -X POST http://localhost:3000/admin/faqs/create \
  -H "Content-Type: application/json" \
  -d '{
    "question": "What is this service?",
    "answer": "<p>This is a multilingual FAQ system.</p>"
  }'

# Update FAQ (requires authentication)
curl -X PUT http://localhost:3000/admin/faqs/123456789 \
  -H "Content-Type: application/json" \
  -d '{
    "question": "Updated question",
    "answer": "<p>Updated answer</p>"
  }'
```

##  Docker Deployment

1. Build and run using Docker Compose:
```bash
docker-compose up --build
```

2. Docker environment configuration:
```yaml
# docker-compose.yml
version: '3.8'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=your_mongodb_uri
      - REDIS_URL=your_redis_url
```

The application will be available at `http://localhost:3000`

##  Security Features

- **Helmet**: Secure HTTP headers
- **CORS**: Configurable Cross-Origin Resource Sharing
- **Session Management**: Secure session handling
- **CSP**: Content Security Policy for resources
- **Method Override**: Secure handling of PUT/DELETE requests

##  Documentation

### API Response Format

Success Response:
```json
{
  "success": true,
  "data": {
    "faqs": [
      {
        "id": "123",
        "question": "What is this?",
        "answer": "<p>This is a FAQ system</p>",
        "translations": {
          "hi": {
            "question": "यह क्या है?",
            "answer": "<p>यह एक FAQ सिस्टम है</p>"
          }
        }
      }
    ]
  }
}
```

Error Response:
```json
{
  "success": false,
  "error": {
    "code": "ERROR_CODE",
    "message": "Error description"
  }
}
```

##  Testing

```bash
# Run all tests
npm test

# Run unit tests only
npm run test:unit

# Run integration tests only
npm run test:integration

# Generate coverage report
npm run test:coverage
```

Test files structure:
```
test/
├─ unit/
│  ├─ basic.test.js
│  └─ faq.model.test.js
├─ integration/
│  ├─ admin.test.js
│  └─ api.test.js
├─ setup.js
└─ test-config.js
```

##  Database Schema

FAQ Model:
```javascript
{
  question: { type: String, required: true },
  answer: { type: String, required: true },
  translations: {
    hi: {
      question: String,
      answer: String
    },
    bn: {
      question: String,
      answer: String
    }
  },
  createdAt: Date,
  updatedAt: Date
}
```

##  Caching Strategy

Redis caching implementation:
- Cache key format: `faq:{id}:{lang}`
- Default TTL: 24 hours
- Auto-invalidation on updates
- Fallback to database on cache miss

##  Project Structure

```
faq-translation-system/
├─ src/
│  ├─ app.js           # Express app setup
│  ├─ config/          # Configuration files
│  ├─ controllers/     # Request handlers
│  │  ├─ adminController.js
│  │  └─ apiController.js
│  ├─ middleware/      # Custom middleware
│  ├─ models/          # Database models
│  │  └─ faq.js
│  ├─ routes/          # API routes
│  │  ├─ admin.js
│  │  └─ api.js
│  ├─ utils/          # Helper functions
│  │  ├─ cache.js
│  │  └─ translator.js
│  └─ views/          # EJS templates
│     ├─ admin/
│     │  ├─ create-faq.ejs
│     │  ├─ dashboard.ejs
│     │  └─ edit-faq.ejs
│     └─ layouts/
│        └─ main.ejs
└─ test/             # Test files
```

##  Supported Languages

- English (en) - Default
- Hindi (hi)
- Bengali (bn)

##  Error Handling

Custom error handling middleware for:
- 404 Not Found
- 500 Internal Server Error
- Validation Errors
- Authentication Errors

##  Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature/new-feature`
3. Commit changes: `git commit -am 'feat: Add new feature'`
4. Push to the branch: `git push origin feature/new-feature`
5. Submit a Pull Request

##  License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- Express.js team
- MongoDB Atlas
- Redis Cloud
- Google Cloud Translation API
